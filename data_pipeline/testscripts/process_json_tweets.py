
import pandas as pd
import psycopg2
#python package with generalized functions
import media_mapper 


'''Creates a database in postgress for storing twitter json files generated by twitter_scraper.py
 and San Francisco block geography shape file. '''


#PLACE TWITTER DATA IN SQL. USE TO GET GEO COORDINATES

def create_tweet_table_sql(df, tablename='tweetsv4', remove_text_column = True):
    ''' 
    INPUT: dataframe to place in sql. 
    
    OUPUT: creates a sql table give by the argument 'tabelname'.
	The text column is not used in postgress data manipulation. 
	If remove_test_column is True, the text column is removed from the table, 
	and dataframe is returned containing the tweet text, and tweet id.    '''
    
    if remove_text_column == True:
        #create a new dataframe with tweet text and id. 
        tweettext_df = df[['text', 'id']]
        #remove text so that it is not passed to postgress. 
        df.pop('text')
        engine = create_engine('postgresql://clwilloughby:christy@localhost:5432/zipfiantwitter')
        #place dataframe into postgress database
        df.to_sql(tablename, engine, if_exists='replace')
        #return a table of tweet text, and tweet id
        return tweettext_df
    
    else:
    	#create a table in postgress containing the entire dataframe. 
        engine = create_engine('postgresql://clwilloughby:christy@localhost:5432/zipfiantwitter')
        df.to_sql(tablename, engine, if_exists='replace')


def format_tweet_table_sql(tweet_table='tweetsv4' , new_geo_tweet_table = 'tweets_with_geo'):
    '''
    INPUT: a postgress table of tweets (generated in create_tweet_table_sql).

    Uses latitude and longitude provided in the tweet table, and the block information
    from the table of san francisco blocks to deduce the geoid of the block each tweet occured in. 
    Filters out tweets that are not in SF county.

    OURPUT:  A new table is generated in postgress (new_geo_tweet_table). Table contains the time
    and geometry data for tweets only in sanfrancisco '''

    #connect to postgress database
    conn = psycopg2.connect(dbname='zipfiantwitter', user ='clwilloughby', host = '/tmp')
    c = conn.cursor()

    #add a geometry column to the tweet table
    query = """ SELECT AddGeometryColumn(%s,'geom',4326,'POINT',2);""" %tweet_table
    c.execute(query)
    conn.commit()

    #use latitude and longitude of tweets to determine the block each tweet occured in
    conn = psycopg2.connect(dbname='zipfiantwitter', user ='clwilloughby', host = '/tmp')
    c = conn.cursor()
    query = """UPDATE %s SET geom = ST_SetSRID(ST_MakePoint(lons, lats), 4326);""" %tweet_table 
    c.execute(query)
    conn.commit()            

    #reformat the table of san francisco neighborhood blocks
    conn = psycopg2.connect(dbname='zipfiantwitter', user ='clwilloughby', host = '/tmp')
    c = conn.cursor()
    query = """SELECT UpdateGeometrySRID('sf_neighb', 'wkb_geometry', 4326);""" 
    c.execute(query)
    conn.commit() 

    #create a new table which contains all tweets in san francisco, as well as the
    #geoid and geometry coordinates for the neighborhood block. 
    conn = psycopg2.connect(dbname='zipfiantwitter', user ='clwilloughby', host = '/tmp')
    c = conn.cursor()
    query = """ SELECT points.*, polys.geoid10
                    INTO %s 
                    FROM sf_neighb polys
                    JOIN %s points 
                    ON (ST_Within(points.geom,polys.wkb_geometry) AND
                    polys.countyfp10 = '075');""" %(new_geo_tweet_table, tweet_table)
    c.execute(query)
    conn.commit()
    conn.close()
 

if __name__ == "__main__":
	